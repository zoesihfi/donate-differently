"use strict";

const conversions = require("webidl-conversions");
const utils = require("./utils.js");

const convertBlob = require("./Blob.js").convert;
const impl = utils.implSymbol;
const EventTarget = require("./EventTarget.js");

module.exports = {
  createInterface: function(defaultPrivateData = {}) {
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
    function FileReader() {
      if (new.target === undefined) {
        throw new TypeError(
          "Failed to construct 'FileReader'. Please use the 'new' operator; this constructor " +
            "cannot be called as a function."
        );
      }

      iface.setup(this);
    }

    Object.setPrototypeOf(FileReader.prototype, EventTarget.interface.prototype);
    Object.setPrototypeOf(FileReader, EventTarget.interface);

    Object.defineProperty(FileReader, "prototype", {
      value: FileReader.prototype,
      writable: false,
      enumerable: false,
      configurable: false
    });

    FileReader.prototype.readAsArrayBuffer = function readAsArrayBuffer(blob) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError(
          "Failed to execute 'readAsArrayBuffer' on 'FileReader': 1 argument required, but only " +
            arguments.length +
            " present."
        );
      }
      const args = [];
      {
        let curArg = arguments[0];
        curArg = convertBlob(curArg, { context: "Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1" });
        args.push(curArg);
      }
      return this[impl].readAsArrayBuffer(...args);
    };

    FileReader.prototype.readAsBinaryString = function readAsBinaryString(blob) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError(
          "Failed to execute 'readAsBinaryString' on 'FileReader': 1 argument required, but only " +
            arguments.length +
            " present."
        );
      }
      const args = [];
      {
        let curArg = arguments[0];
        curArg = convertBlob(curArg, {
          context: "Failed to execute 'readAsBinaryString' on 'FileReader': parameter 1"
        });
        args.push(curArg);
      }
      return this[impl].readAsBinaryString(...args);
    };

    FileReader.prototype.readAsText = function readAsText(blob) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError(
          "Failed to execute 'readAsText' on 'FileReader': 1 argument required, but only " +
            arguments.length +
            " present."
        );
      }
      const args = [];
      {
        let curArg = arguments[0];
        curArg = convertBlob(curArg, { context: "Failed to execute 'readAsText' on 'FileReader': parameter 1" });
        args.push(curArg);
      }
      {
        let curArg = arguments[1];
        if (curArg !== undefined) {
          curArg = conversions["DOMString"](curArg, {
            context: "Failed to execute 'readAsText' on 'FileReader': parameter 2"
          });
        }
        args.push(curArg);
      }
      return this[impl].readAsText(...args);
    };

    FileReader.prototype.readAsDataURL = function readAsDataURL(blob) {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      if (arguments.length < 1) {
        throw new TypeError(
          "Failed to execute 'readAsDataURL' on 'FileReader': 1 argument required, but only " +
            arguments.length +
            " present."
        );
      }
      const args = [];
      {
        let curArg = arguments[0];
        curArg = convertBlob(curArg, { context: "Failed to execute 'readAsDataURL' on 'FileReader': parameter 1" });
        args.push(curArg);
      }
      return this[impl].readAsDataURL(...args);
    };

    FileReader.prototype.abort = function abort() {
      if (!this || !module.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }

      return this[impl].abort();
    };

    Object.defineProperty(FileReader.prototype, "readyState", {
      get() {
<<<<<<< HEAD
=======
    class FileReader extends EventTarget.interface {
      constructor() {
        return iface.setup(Object.create(new.target.prototype));
      }

      readAsArrayBuffer(blob) {
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError(
            "Failed to execute 'readAsArrayBuffer' on 'FileReader': 1 argument required, but only " +
              arguments.length +
              " present."
          );
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = convertBlob(curArg, {
            context: "Failed to execute 'readAsArrayBuffer' on 'FileReader': parameter 1"
          });
          args.push(curArg);
        }
        return this[impl].readAsArrayBuffer(...args);
      }

      readAsBinaryString(blob) {
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError(
            "Failed to execute 'readAsBinaryString' on 'FileReader': 1 argument required, but only " +
              arguments.length +
              " present."
          );
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = convertBlob(curArg, {
            context: "Failed to execute 'readAsBinaryString' on 'FileReader': parameter 1"
          });
          args.push(curArg);
        }
        return this[impl].readAsBinaryString(...args);
      }

      readAsText(blob) {
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError(
            "Failed to execute 'readAsText' on 'FileReader': 1 argument required, but only " +
              arguments.length +
              " present."
          );
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = convertBlob(curArg, { context: "Failed to execute 'readAsText' on 'FileReader': parameter 1" });
          args.push(curArg);
        }
        {
          let curArg = arguments[1];
          if (curArg !== undefined) {
            curArg = conversions["DOMString"](curArg, {
              context: "Failed to execute 'readAsText' on 'FileReader': parameter 2"
            });
          }
          args.push(curArg);
        }
        return this[impl].readAsText(...args);
      }

      readAsDataURL(blob) {
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        if (arguments.length < 1) {
          throw new TypeError(
            "Failed to execute 'readAsDataURL' on 'FileReader': 1 argument required, but only " +
              arguments.length +
              " present."
          );
        }
        const args = [];
        {
          let curArg = arguments[0];
          curArg = convertBlob(curArg, { context: "Failed to execute 'readAsDataURL' on 'FileReader': parameter 1" });
          args.push(curArg);
        }
        return this[impl].readAsDataURL(...args);
      }

      abort() {
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return this[impl].abort();
      }

      get readyState() {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return this[impl]["readyState"];
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
      },

      enumerable: true,
      configurable: true
    });

    Object.defineProperty(FileReader.prototype, "result", {
      get() {
<<<<<<< HEAD
=======
      }

      get result() {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(this[impl]["result"]);
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
      },

      enumerable: true,
      configurable: true
    });

    Object.defineProperty(FileReader.prototype, "error", {
      get() {
<<<<<<< HEAD
=======
      }

      get error() {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(this[impl]["error"]);
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
      },

      enumerable: true,
      configurable: true
    });

    Object.defineProperty(FileReader.prototype, "onloadstart", {
      get() {
<<<<<<< HEAD
=======
      }

      get onloadstart() {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(this[impl]["onloadstart"]);
<<<<<<< HEAD
<<<<<<< HEAD
      },

      set(V) {
=======
      }

      set onloadstart(V) {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
      },

      set(V) {
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);

        this[impl]["onloadstart"] = V;
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
      },

      enumerable: true,
      configurable: true
    });

    Object.defineProperty(FileReader.prototype, "onprogress", {
      get() {
<<<<<<< HEAD
=======
      }

      get onprogress() {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(this[impl]["onprogress"]);
<<<<<<< HEAD
<<<<<<< HEAD
      },

      set(V) {
=======
      }

      set onprogress(V) {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
      },

      set(V) {
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);

        this[impl]["onprogress"] = V;
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
      },

      enumerable: true,
      configurable: true
    });

    Object.defineProperty(FileReader.prototype, "onload", {
      get() {
<<<<<<< HEAD
=======
      }

      get onload() {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(this[impl]["onload"]);
<<<<<<< HEAD
<<<<<<< HEAD
      },

      set(V) {
=======
      }

      set onload(V) {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
      },

      set(V) {
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);

        this[impl]["onload"] = V;
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
      },

      enumerable: true,
      configurable: true
    });

    Object.defineProperty(FileReader.prototype, "onabort", {
      get() {
<<<<<<< HEAD
=======
      }

      get onabort() {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(this[impl]["onabort"]);
<<<<<<< HEAD
<<<<<<< HEAD
      },

      set(V) {
=======
      }

      set onabort(V) {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
      },

      set(V) {
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);

        this[impl]["onabort"] = V;
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
      },

      enumerable: true,
      configurable: true
    });

    Object.defineProperty(FileReader.prototype, "onerror", {
      get() {
<<<<<<< HEAD
=======
      }

      get onerror() {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(this[impl]["onerror"]);
<<<<<<< HEAD
<<<<<<< HEAD
      },

      set(V) {
=======
      }

      set onerror(V) {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
      },

      set(V) {
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);

        this[impl]["onerror"] = V;
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
      },

      enumerable: true,
      configurable: true
    });

    Object.defineProperty(FileReader.prototype, "onloadend", {
      get() {
<<<<<<< HEAD
=======
      }

      get onloadend() {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        return utils.tryWrapperForImpl(this[impl]["onloadend"]);
<<<<<<< HEAD
<<<<<<< HEAD
      },

      set(V) {
=======
      }

      set onloadend(V) {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
      },

      set(V) {
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
        if (!this || !module.exports.is(this)) {
          throw new TypeError("Illegal invocation");
        }

        V = utils.tryImplForWrapper(V);

        this[impl]["onloadend"] = V;
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
      },

      enumerable: true,
      configurable: true
    });

    Object.defineProperty(FileReader, "EMPTY", {
      value: 0,
      enumerable: true
    });
    Object.defineProperty(FileReader.prototype, "EMPTY", {
      value: 0,
      enumerable: true
    });

    Object.defineProperty(FileReader, "LOADING", {
      value: 1,
      enumerable: true
    });
    Object.defineProperty(FileReader.prototype, "LOADING", {
      value: 1,
      enumerable: true
    });

    Object.defineProperty(FileReader, "DONE", {
      value: 2,
      enumerable: true
    });
    Object.defineProperty(FileReader.prototype, "DONE", {
      value: 2,
      enumerable: true
    });

    Object.defineProperty(FileReader.prototype, Symbol.toStringTag, {
      value: "FileReader",
      writable: false,
      enumerable: false,
      configurable: true
    });

<<<<<<< HEAD
=======
      }
    }
    Object.defineProperties(FileReader.prototype, {
      readAsArrayBuffer: { enumerable: true },
      readAsBinaryString: { enumerable: true },
      readAsText: { enumerable: true },
      readAsDataURL: { enumerable: true },
      abort: { enumerable: true },
      readyState: { enumerable: true },
      result: { enumerable: true },
      error: { enumerable: true },
      onloadstart: { enumerable: true },
      onprogress: { enumerable: true },
      onload: { enumerable: true },
      onabort: { enumerable: true },
      onerror: { enumerable: true },
      onloadend: { enumerable: true },
      [Symbol.toStringTag]: { value: "FileReader", configurable: true },
      EMPTY: { value: 0, enumerable: true },
      LOADING: { value: 1, enumerable: true },
      DONE: { value: 2, enumerable: true }
    });
    Object.defineProperties(FileReader, {
      EMPTY: { value: 0, enumerable: true },
      LOADING: { value: 1, enumerable: true },
      DONE: { value: 2, enumerable: true }
    });
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
    const iface = {
      create(constructorArgs, privateData) {
        let obj = Object.create(FileReader.prototype);
        obj = this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      createImpl(constructorArgs, privateData) {
        let obj = Object.create(FileReader.prototype);
        obj = this.setup(obj, constructorArgs, privateData);
        return utils.implForWrapper(obj);
      },
      _internalSetup(obj) {
        EventTarget._internalSetup(obj);
      },
      setup(obj, constructorArgs, privateData) {
        if (!privateData) privateData = {};

        for (var prop in defaultPrivateData) {
          if (!(prop in privateData)) {
            privateData[prop] = defaultPrivateData[prop];
          }
        }

        privateData.wrapper = obj;

        this._internalSetup(obj);
        Object.defineProperty(obj, impl, {
          value: new Impl.implementation(constructorArgs, privateData),
<<<<<<< HEAD
<<<<<<< HEAD
          writable: false,
          enumerable: false,
=======
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
          writable: false,
          enumerable: false,
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
          configurable: true
        });

        obj[impl][utils.wrapperSymbol] = obj;
        if (Impl.init) {
          Impl.init(obj[impl], privateData);
        }
        return obj;
      },
      interface: FileReader,
      expose: {
        Window: { FileReader },
        Worker: { FileReader }
      }
    }; // iface
    return iface;
  }, // createInterface

  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`
  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as
  // implementing this mixin interface.
  _mixedIntoPredicates: [],
  is(obj) {
    if (obj) {
      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {
        return true;
      }
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(obj)) {
          return true;
        }
      }
    }
    return false;
  },
  isImpl(obj) {
    if (obj) {
      if (obj instanceof Impl.implementation) {
        return true;
      }

      const wrapper = utils.wrapperForImpl(obj);
      for (const isMixedInto of module.exports._mixedIntoPredicates) {
        if (isMixedInto(wrapper)) {
          return true;
        }
      }
    }
    return false;
  },
  convert(obj, { context = "The provided value" } = {}) {
    if (module.exports.is(obj)) {
      return utils.implForWrapper(obj);
    }
    throw new TypeError(`${context} is not of type 'FileReader'.`);
  }
}; // module.exports

const Impl = require("../file-api/FileReader-impl.js");
