<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
'use strict';

var PlainValue = require('./PlainValue-ec8e588e.js');
var parseCst = require('./parse-cst.js');
require('./resolveSeq-4a68b39b.js');
var Document$1 = require('./Document-2cf6b08c.js');
var Schema = require('./Schema-42e9705c.js');
var warnings = require('./warnings-39684f17.js');
<<<<<<< HEAD
=======
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _parse = _interopRequireDefault(require("./cst/parse"));

var _Document = _interopRequireDefault(require("./Document"));

var _errors = require("./errors");

var _schema = _interopRequireDefault(require("./schema"));

var _warnings = require("./warnings");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const defaultOptions = {
  anchorPrefix: 'a',
  customTags: null,
  keepCstNodes: false,
  keepNodeTypes: true,
  keepBlobsInJSON: true,
  mapAsMap: false,
  maxAliasCount: 100,
  prettyErrors: false,
  // TODO Set true in v2
  simpleKeys: false,
  version: '1.2'
};
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e

function createNode(value, wrapScalars = true, tag) {
  if (tag === undefined && typeof wrapScalars === 'string') {
    tag = wrapScalars;
    wrapScalars = true;
  }

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
  const options = Object.assign({}, Document$1.Document.defaults[Document$1.defaultOptions.version], Document$1.defaultOptions);
  const schema = new Schema.Schema(options);
  return schema.createNode(value, wrapScalars, tag);
}

class Document extends Document$1.Document {
  constructor(options) {
    super(Object.assign({}, Document$1.defaultOptions, options));
<<<<<<< HEAD
=======
  const options = Object.assign({}, _Document.default.defaults[defaultOptions.version], defaultOptions);
  const schema = new _schema.default(options);
  return schema.createNode(value, wrapScalars, tag);
}

class Document extends _Document.default {
  constructor(options) {
    super(Object.assign({}, defaultOptions, options));
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
  }

}

function parseAllDocuments(src, options) {
  const stream = [];
  let prev;

<<<<<<< HEAD
<<<<<<< HEAD
  for (const cstDoc of parseCst.parse(src)) {
=======
  for (const cstDoc of (0, _parse.default)(src)) {
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
  for (const cstDoc of parseCst.parse(src)) {
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
    const doc = new Document(options);
    doc.parse(cstDoc, prev);
    stream.push(doc);
    prev = doc;
  }

  return stream;
}

function parseDocument(src, options) {
<<<<<<< HEAD
<<<<<<< HEAD
  const cst = parseCst.parse(src);
=======
  const cst = (0, _parse.default)(src);
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
  const cst = parseCst.parse(src);
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
  const doc = new Document(options).parse(cst[0]);

  if (cst.length > 1) {
    const errMsg = 'Source contains multiple documents; please use YAML.parseAllDocuments()';
<<<<<<< HEAD
<<<<<<< HEAD
    doc.errors.unshift(new PlainValue.YAMLSemanticError(cst[1], errMsg));
=======
    doc.errors.unshift(new _errors.YAMLSemanticError(cst[1], errMsg));
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
    doc.errors.unshift(new PlainValue.YAMLSemanticError(cst[1], errMsg));
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
  }

  return doc;
}

function parse(src, options) {
  const doc = parseDocument(src, options);
<<<<<<< HEAD
<<<<<<< HEAD
  doc.warnings.forEach(warning => warnings.warn(warning));
=======
  doc.warnings.forEach(warning => (0, _warnings.warn)(warning));
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
  doc.warnings.forEach(warning => warnings.warn(warning));
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
  if (doc.errors.length > 0) throw doc.errors[0];
  return doc.toJSON();
}

function stringify(value, options) {
  const doc = new Document(options);
  doc.contents = value;
  return String(doc);
}

<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
const YAML = {
  createNode,
  defaultOptions: Document$1.defaultOptions,
  Document,
  parse,
  parseAllDocuments,
  parseCST: parseCst.parse,
  parseDocument,
  scalarOptions: Document$1.scalarOptions,
  stringify
};

exports.YAML = YAML;
<<<<<<< HEAD
=======
var _default = {
  createNode,
  defaultOptions,
  Document,
  parse,
  parseAllDocuments,
  parseCST: _parse.default,
  parseDocument,
  stringify
};
exports.default = _default;
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
