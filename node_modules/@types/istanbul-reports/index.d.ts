// Type definitions for istanbul-reports 1.1
// Project: https://github.com/istanbuljs/istanbuljs, https://istanbul.js.org
// Definitions by: Jason Cheatham <https://github.com/jason0x43>
// Definitions: https://github.com/DefinitelyTyped/DefinitelyTyped
// TypeScript Version: 2.4

import { Context, Node, FileWriter, Visitor } from 'istanbul-lib-report';
import { CoverageSummary } from 'istanbul-lib-coverage';

export function create<T extends keyof ReportOptions>(
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
    name: T,
    options?: Partial<ReportOptions[T]>
): Visitor;

export interface ReportOptions {
    clover: RootedOptions;
    cobertura: RootedOptions;
    html: HtmlOptions;
    json: Options;
    'json-summary': Options;
    lcov: never;
    lcovonly: Options;
    none: RootedOptions;
    teamcity: Options & { blockName: string };
    text: Options & { maxCols: number };
    'text-lcov': Options;
    'text-summary': Options;
<<<<<<< HEAD
=======
	name: T,
	options?: Partial<ReportOptions[T]>
): Visitor;

export interface ReportOptions {
	clover: RootedOptions;
	cobertura: RootedOptions;
	html: HtmlOptions;
	json: Options;
	'json-summary': Options;
	lcov: never;
	lcovonly: Options;
	none: RootedOptions;
	teamcity: Options & { blockName: string };
	text: Options & { maxCols: number };
	'text-lcov': Options;
	'text-summary': Options;
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
}

export type ReportType = keyof ReportOptions;

export interface Options {
<<<<<<< HEAD
<<<<<<< HEAD
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
    file: string;
}

export interface RootedOptions extends Options {
    projectRoot: string;
}

export interface HtmlOptions {
    verbose: boolean;
    linkMapper: LinkMapper;
    subdir: string;
}

export interface LinkMapper {
    getPath(node: string | Node): string;
    relativePath(source: string | Node, target: string | Node): string;
    assetPath(node: Node, name: string): string;
<<<<<<< HEAD
=======
	file: string;
}

export interface RootedOptions extends Options {
	projectRoot: string;
}

export interface HtmlOptions {
	verbose: boolean;
	linkMapper: LinkMapper;
	subdir: string;
}

export interface LinkMapper {
	getPath(node: string | Node): string;
	relativePath(source: string | Node, target: string | Node): string;
	assetPath(node: Node, name: string): string;
>>>>>>> 782567c486993431d88a7d42ed2c18702ecdfd4f
=======
>>>>>>> b9690f13ae0b02552662ffbd680e2069f9283c9e
}
